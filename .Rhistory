polls <- read.csv(paste0(path_to_folder, "president_polls.csv"))
# Convert end_date to date format
polls$end_date <- as.Date(polls$end_date, format="%d/%m/%Y")
# Choose specific dates and candidates
filtered_polls <- polls %>%
filter(end_date >= as.Date("2024-08-01") &
end_date <= as.Date("2024-10-17") &
(answer == "Trump" | answer == "Harris")) %>%
mutate(answer = factor(answer, levels = c("Harris", "Trump")))
library(ggplot2)
library(lubridate)
library(dplyr)
path_to_folder <- "/Users/liyang/Desktop/GY476_data/"
polls <- read.csv(paste0(path_to_folder, "president_polls.csv"))
# Convert end_date to date format
polls$end_date <- as.Date(polls$end_date, format="%d/%m/%Y")
# Choose specific dates and candidates
filtered_polls <- polls %>%
filter(end_date >= as.Date("2024-08-01") &
end_date <= as.Date("2024-10-17") &
(answer == "Trump" | answer == "Harris")) %>%
mutate(answer = factor(answer, levels = c("Harris", "Trump")))
# Create the plot
ggplot(filtered_polls, aes(x = end_date, y = polling result, color = answer)) +
library(ggplot2)
library(lubridate)
library(dplyr)
path_to_folder <- "/Users/liyang/Desktop/GY476_data/"
polls <- read.csv(paste0(path_to_folder, "president_polls.csv"))
# Convert end_date to date format
polls$end_date <- as.Date(polls$end_date, format="%d/%m/%Y")
# Choose specific dates and candidates
filtered_polls <- polls %>%
filter(end_date >= as.Date("2024-08-01") &
end_date <= as.Date("2024-10-17") &
(answer == "Trump" | answer == "Harris")) %>%
mutate(answer = factor(answer, levels = c("Harris", "Trump")))
# Create the plot
ggplot(filtered_polls, aes(x = end_date, y = polling result, color = candidate)) +
library(ggplot2)
library(lubridate)
library(dplyr)
path_to_folder <- "/Users/liyang/Desktop/GY476_data/"
polls <- read.csv(paste0(path_to_folder, "president_polls.csv"))
# Convert end_date to date format
polls$end_date <- as.Date(polls$end_date, format="%d/%m/%Y")
# Choose specific dates and candidates
filtered_polls <- polls %>%
filter(end_date >= as.Date("2024-08-01") &
end_date <= as.Date("2024-10-17") &
(answer == "Trump" | answer == "Harris")) %>%
mutate(answer = factor(answer, levels = c("Harris", "Trump")))
# Create the plot
ggplot(filtered_polls, aes(x = end_date, y = margin, color = candidate)) +
geom_jitter(width = 0.1, height = 0, size = 2, alpha = 0.7) +  # Jitter points
geom_smooth(method = "loess", se = FALSE, aes(fill = answer), size = 1.2) +  # Smoothing line
scale_color_manual(values = c("Harris" = "#1f77b4", "Trump" = "#d62728")) +  # Color-blind safe colors
labs(title = "National Polling Results for the Current U.S. Presidential Election",
x = "Date",
y = "Polling result",
color = "candidate") +
theme_minimal(base_size = 15) +  # Minimal theme with larger base size
theme(panel.grid.major = element_line(color = "gray80"),  # Customize grid lines
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5),  # Center title
legend.position = "top") +  # Place legend at the top
xlim(as.Date("2024-08-01"), as.Date("2024-10-17")) +  # Set x-axis limits
ylim(-20, 20)  # Set y-axis limits
library(ggplot2)
library(lubridate)
library(dplyr)
path_to_folder <- "/Users/liyang/Desktop/GY476_data/"
polls <- read.csv(paste0(path_to_folder, "president_polls.csv"))
# Convert end_date to date format
polls$end_date <- as.Date(polls$end_date, format="%d/%m/%Y")
# Choose specific dates and candidates
filtered_polls <- polls %>%
filter(end_date >= as.Date("2024-08-01") &
end_date <= as.Date("2024-10-17") &
(answer == "Trump" | answer == "Harris")) %>%
mutate(answer = factor(answer, levels = c("Harris", "Trump")))
# Create the plot
ggplot(filtered_polls, aes(x = end_date, y = margin, color = answer)) +
geom_jitter(width = 0.1, height = 0, size = 2, alpha = 0.7) +  # Jitter points
geom_smooth(method = "loess", se = FALSE, aes(fill = answer), size = 1.2) +  # Smoothing line
scale_color_manual(values = c("Harris" = "#1f77b4", "Trump" = "#d62728")) +  # Color-blind safe colors
labs(title = "National Polling Results for the Current U.S. Presidential Election",
x = "Date",
y = "Polling result",
color = "candidate") +
theme_minimal(base_size = 15) +  # Minimal theme with larger base size
theme(panel.grid.major = element_line(color = "gray80"),  # Customize grid lines
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5),  # Center title
legend.position = "top") +  # Place legend at the top
xlim(as.Date("2024-08-01"), as.Date("2024-10-17")) +  # Set x-axis limits
ylim(-20, 20)  # Set y-axis limits
library(ggplot2)
library(lubridate)
library(dplyr)
path_to_folder <- "/Users/liyang/Desktop/GY476_data/"
polls <- read.csv(paste0(path_to_folder, "president_polls.csv"))
# Convert end_date to date format
polls$end_date <- as.Date(polls$end_date, format="%d/%m/%Y")
# Choose specific dates and candidates
filtered_polls <- polls %>%
filter(end_date >= as.Date("2024-08-01") &
end_date <= as.Date("2024-10-17") &
(answer == "Trump" | answer == "Harris")) %>%
mutate(answer = factor(answer, levels = c("Harris", "Trump")))
# Create the plot
ggplot(filtered_polls, aes(x = end_date, y = margin, color = answer)) +
geom_jitter(width = 0.1, height = 0, size = 2, alpha = 0.7) +  # Jitter points
library(ggplot2)
library(lubridate)
library(dplyr)
path_to_folder <- "/Users/liyang/Desktop/GY476_data/"
polls <- read.csv(paste0(path_to_folder, "president_polls.csv"))
# Convert end_date to date format
polls$end_date <- as.Date(polls$end_date, format="%d/%m/%Y")
# Choose specific dates and candidates
filtered_polls <- polls %>%
filter(end_date >= as.Date("2024-08-01") &
end_date <= as.Date("2024-10-17") &
(answer == "Trump" | answer == "Harris")) %>%
mutate(answer = factor(answer, levels = c("Harris", "Trump")))
# Create the plot
ggplot(filtered_polls, aes(x = end_date, y = margin, color = answer)) +
library(ggplot2)
library(lubridate)
library(dplyr)
path_to_folder <- "/Users/liyang/Desktop/GY476_data/"
polls <- read.csv(paste0(path_to_folder, "president_polls.csv"))
# Convert end_date to date format
polls$end_date <- as.Date(polls$end_date, format="%d/%m/%Y")
# Choose specific dates and candidates
filtered_polls <- polls %>%
filter(end_date >= as.Date("2024-08-01") &
end_date <= as.Date("2024-10-17") &
(answer == "Trump" | answer == "Harris")) %>%
mutate(answer = factor(answer, levels = c("Harris", "Trump")))
# Create the plot
ggplot(filtered_polls, aes(x = end_date, y = margin, color = candidate)) +
library(ggplot2)
library(lubridate)
library(dplyr)
path_to_folder <- "/Users/liyang/Desktop/GY476_data/"
polls <- read.csv(paste0(path_to_folder, "president_polls.csv"))
# Convert end_date to date format
polls$end_date <- as.Date(polls$end_date, format="%d/%m/%Y")
# Choose specific dates and candidates
filtered_polls <- polls %>%
filter(end_date >= as.Date("2024-08-01") &
end_date <= as.Date("2024-10-17") &
(answer == "Trump" | answer == "Harris")) %>%
mutate(answer = factor(answer, levels = c("Harris", "Trump")))
# Create the plot
ggplot(filtered_polls, aes(x = end_date, y = margin, color = answer)) +
library(ggplot2)
library(lubridate)
library(dplyr)
path_to_folder <- "/Users/liyang/Desktop/GY476_data/"
polls <- read.csv(paste0(path_to_folder, "president_polls.csv"))
# Convert end_date to date format
polls$end_date <- as.Date(polls$end_date, format="%d/%m/%Y")
# Choose specific dates and candidates
filtered_polls <- polls %>%
filter(end_date >= as.Date("2024-08-01") &
end_date <= as.Date("2024-10-17") &
(answer == "Trump" | answer == "Harris")) %>%
mutate(answer = factor(answer, levels = c("Harris", "Trump")))
# Create the plot
ggplot(filtered_polls, aes(x = end_date, y = margin, color = candidate)) +
geom_jitter(size = 2, alpha = 0.7, width = 0.1) +  # Jittered points for individual poll results
geom_smooth(method = "loess", se = FALSE, size = 1.2) +  # Smoothed line for trends
scale_color_manual(values = c("Kamala Harris" = "#1f77b4", "Donald Trump" = "#d62728")) +  # Custom colors
labs(title = "2024年美国总统选举全国民调结果",
x = "日期",
y = "民调差距 (%)",
color = "候选人") +
theme_minimal(base_size = 15) +  # Minimal theme with increased base font size
theme(panel.grid.major = element_line(color = "gray80"),  # Major grid lines
panel.grid.minor = element_blank(),  # No minor grid lines
plot.title = element_text(hjust = 0.5),  # Center the title
legend.position = "top") +  # Legend at the top
xlim(as.Date("2024-08-01"), as.Date("2024-10-17")) +  # X-axis limits
ylim(-20, 20)  # Y-axis limits
library(ggplot2)
library(lubridate)
library(dplyr)
path_to_folder <- "/Users/liyang/Desktop/GY476_data/"
polls <- read.csv(paste0(path_to_folder, "president_polls.csv"))
# Convert end_date to date format
polls$end_date <- as.Date(polls$end_date, format="%d/%m/%Y")
# Choose specific dates and candidates
filtered_polls <- polls %>%
filter(end_date >= as.Date("2024-08-01") &
end_date <= as.Date("2024-10-17") &
(answer == "Trump" | answer == "Harris")) %>%
mutate(answer = factor(answer, levels = c("Harris", "Trump")))
# Create the plot
ggplot(filtered_polls, aes(x = end_date, y = margin, color = answer)) +
geom_jitter(size = 2, alpha = 0.7, width = 0.1) +  # Jittered points for individual poll results
geom_smooth(method = "loess", se = FALSE, size = 1.2) +  # Smoothed line for trends
scale_color_manual(values = c("Kamala Harris" = "#1f77b4", "Donald Trump" = "#d62728")) +  # Custom colors
labs(title = "2024年美国总统选举全国民调结果",
x = "日期",
y = "民调差距 (%)",
color = "候选人") +
theme_minimal(base_size = 15) +  # Minimal theme with increased base font size
theme(panel.grid.major = element_line(color = "gray80"),  # Major grid lines
panel.grid.minor = element_blank(),  # No minor grid lines
plot.title = element_text(hjust = 0.5),  # Center the title
legend.position = "top") +  # Legend at the top
xlim(as.Date("2024-08-01"), as.Date("2024-10-17")) +  # X-axis limits
ylim(-20, 20)  # Y-axis limits
library(ggplot2)
library(lubridate)
library(dplyr)
path_to_folder <- "/Users/liyang/Desktop/GY476_data/"
polls <- read.csv(paste0(path_to_folder, "president_polls.csv"))
# Convert end_date to date format
polls$end_date <- as.Date(polls$end_date, format="%d/%m/%Y")
# Choose specific dates and candidates
filtered_polls <- polls %>%
filter(end_date >= as.Date("2024-08-01") &
end_date <= as.Date("2024-10-17") &
(answer == "Trump" | answer == "Harris")) %>%
mutate(answer = factor(answer, levels = c("Harris", "Trump")))
# Create the plot
ggplot(filtered_polls, aes(x = end_date, y = answer, color = candidate_name)) +
geom_jitter(size = 2, alpha = 0.7, width = 0.1) +  # Jittered points for individual poll results
geom_smooth(method = "loess", se = FALSE, size = 1.2) +  # Smoothed line for trends
scale_color_manual(values = c("Kamala Harris" = "#1f77b4", "Donald Trump" = "#d62728")) +  # Custom colors
labs(title = "2024年美国总统选举全国民调结果",
x = "日期",
y = "民调差距 (%)",
color = "候选人") +
theme_minimal(base_size = 15) +  # Minimal theme with increased base font size
theme(panel.grid.major = element_line(color = "gray80"),  # Major grid lines
panel.grid.minor = element_blank(),  # No minor grid lines
plot.title = element_text(hjust = 0.5),  # Center the title
legend.position = "top") +  # Legend at the top
xlim(as.Date("2024-08-01"), as.Date("2024-10-17")) +  # X-axis limits
ylim(-20, 20)  # Y-axis limits
library(ggplot2)
library(lubridate)
library(dplyr)
path_to_folder <- "/Users/liyang/Desktop/GY476_data/"
polls <- read.csv(paste0(path_to_folder, "president_polls.csv"))
# Convert end_date to date format
polls$end_date <- as.Date(polls$end_date, format="%d/%m/%Y")
# Choose specific dates and candidates
filtered_polls <- polls %>%
filter(end_date >= as.Date("2024-08-01") &
end_date <= as.Date("2024-10-17") &
(answer == "Trump" | answer == "Harris")) %>%
mutate(answer = factor(answer, levels = c("Harris", "Trump")))
# Create the plot using 'answer' as the y variable
ggplot(filtered_polls, aes(x = end_date, y = answer, color = candidate)) +
geom_jitter(size = 2, alpha = 0.7, width = 0.1) +  # Jittered points for individual poll results
geom_smooth(method = "loess", se = FALSE, size = 1.2) +  # Smoothed line for trends
scale_color_manual(values = c("Kamala Harris" = "#1f77b4", "Donald Trump" = "#d62728")) +  # Custom colors
labs(title = "2024 U.S. Presidential Election National Polling Results",
x = "Date",
y = "Polling Result (%)",  # Adjust y-axis label if needed
color = "Candidate") +
theme_minimal(base_size = 15) +  # Minimal theme with increased base font size
theme(panel.grid.major = element_line(color = "gray80"),  # Major grid lines
panel.grid.minor = element_blank(),  # No minor grid lines
plot.title = element_text(hjust = 0.5),  # Center the title
legend.position = "top") +  # Legend at the top
xlim(as.Date("2024-08-01"), as.Date("2024-10-17")) +  # X-axis limits
ylim(-20, 20)  # Y-axis limits
library(ggplot2)
library(lubridate)
library(dplyr)
path_to_folder <- "/Users/liyang/Desktop/GY476_data/"
polls <- read.csv(paste0(path_to_folder, "president_polls.csv"))
# Convert end_date to date format
polls$end_date <- as.Date(polls$end_date, format="%d/%m/%Y")
# Choose specific dates and candidates
filtered_polls <- polls %>%
filter(end_date >= as.Date("2024-08-01") &
end_date <= as.Date("2024-10-17") &
(answer == "Trump" | answer == "Harris")) %>%
mutate(answer = factor(answer, levels = c("Harris", "Trump")))
# Create the plot using 'answer' as the y variable
ggplot(filtered_polls, aes(x = end_date, y = answer, color = candidate_name)) +
geom_jitter(size = 2, alpha = 0.7, width = 0.1) +  # Jittered points for individual poll results
geom_smooth(method = "loess", se = FALSE, size = 1.2) +  # Smoothed line for trends
scale_color_manual(values = c("Kamala Harris" = "#1f77b4", "Donald Trump" = "#d62728")) +  # Custom colors
labs(title = "2024 U.S. Presidential Election National Polling Results",
x = "Date",
y = "Polling Result (%)",  # Adjust y-axis label if needed
color = "Candidate") +
theme_minimal(base_size = 15) +  # Minimal theme with increased base font size
theme(panel.grid.major = element_line(color = "gray80"),  # Major grid lines
panel.grid.minor = element_blank(),  # No minor grid lines
plot.title = element_text(hjust = 0.5),  # Center the title
legend.position = "top") +  # Legend at the top
xlim(as.Date("2024-08-01"), as.Date("2024-10-17")) +  # X-axis limits
ylim(-20, 20)  # Y-axis limits
library(ggplot2)
library(lubridate)
library(dplyr)
path_to_folder <- "/Users/liyang/Desktop/GY476_data/"
polls <- read.csv(paste0(path_to_folder, "president_polls.csv"))
# Convert end_date to date format
polls$end_date <- as.Date(polls$end_date, format="%d/%m/%Y")
# Choose specific dates and candidates
filtered_polls <- polls %>%
filter(end_date >= as.Date("2024-08-01") &
end_date <= as.Date("2024-10-17") &
(answer == "Trump" | answer == "Harris")) %>%
mutate(answer = factor(answer, levels = c("Harris", "Trump")))
# Create the plot using 'answer' as the y variable
ggplot(filtered_polls, aes(x = end_date, y = answer, color = candidate_name)) +
geom_jitter(size = 2, alpha = 0.7, width = 0.1) +  # Jittered points for individual poll results
geom_smooth(method = "loess", se = FALSE, size = 1.2) +  # Smoothed line for trends
scale_color_manual(values = c("Kamala Harris" = "#1f77b4", "Donald Trump" = "#d62728")) +  # Custom colors
labs(title = "National Polling Results for the 2024 U.S. Presidential Election",
x = "Date",
y = "Polling Result (%)",
color = "Candidate") +
theme_minimal(base_size = 15) +  # Minimal theme with increased base font size
theme(panel.grid.major = element_line(color = "gray80"),  # Major grid lines
panel.grid.minor = element_blank(),  # No minor grid lines
plot.title = element_text(hjust = 0.5),  # Center the title
legend.position = "top") +  # Legend at the top
xlim(as.Date("2024-08-01"), as.Date("2024-10-17")) +  # X-axis limits
ylim(-20, 20)  # Y-axis limits
library(ggplot2)
library(lubridate)
library(dplyr)
path_to_folder <- "/Users/liyang/Desktop/GY476_data/"
polls <- read.csv(paste0(path_to_folder, "president_polls.csv"))
# Convert end_date to date format
polls$end_date <- as.Date(polls$end_date, format="%d/%m/%Y")
# Choose specific dates and candidates
filtered_polls <- polls %>%
filter(end_date >= as.Date("2024-08-01") &
end_date <= as.Date("2024-10-17") &
(answer == "Trump" | answer == "Harris")) %>%
mutate(answer = factor(answer, levels = c("Harris", "Trump")))
# Create the plot using 'answer' as the y variable
ggplot(filtered_polls, aes(x = end_date, y = answer, color = candidate_name)) +
geom_jitter(size = 2, alpha = 0.7, width = 0.1) +  # Jittered points for individual poll results
geom_smooth(method = "loess", se = FALSE, size = 1.2) +  # Smoothed line for trends
scale_color_manual(values = c("Kamala Harris" = "#1f77b4", "Donald Trump" = "#d62728")) +  # Custom colors
labs(title = "Polling Results for the 2024 U.S. Presidential Election",
x = "Date",
y = "Polling Result (%)",
color = "Candidate") +
theme_minimal(base_size = 15) +  # Minimal theme with increased base font size
theme(panel.grid.major = element_line(color = "gray80"),  # Major grid lines
panel.grid.minor = element_blank(),  # No minor grid lines
plot.title = element_text(hjust = 0.5),  # Center the title
legend.position = "top") +  # Legend at the top
xlim(as.Date("2024-08-01"), as.Date("2024-10-17")) +  # X-axis limits
ylim(-20, 20)  # Y-axis limits
library(ggplot2)
library(lubridate)
library(dplyr)
path_to_folder <- "/Users/liyang/Desktop/GY476_data/"
polls <- read.csv(paste0(path_to_folder, "president_polls.csv"))
# Convert end_date to date format
polls$end_date <- as.Date(polls$end_date, format="%d/%m/%Y")
# Choose specific dates and candidates
filtered_polls <- polls %>%
filter(end_date >= as.Date("2024-08-01") &
end_date <= as.Date("2024-10-17") &
(answer == "Trump" | answer == "Harris")) %>%
mutate(answer = factor(answer, levels = c("Harris", "Trump")))
# Create the plot using 'answer' as the y variable
ggplot(filtered_polls, aes(x = end_date, y = answer, color = candidate)) +
geom_jitter(size = 2, alpha = 0.7, width = 0.1) +  # Jittered points for individual poll results
geom_smooth(method = "loess", se = FALSE, size = 1.2) +  # Smoothed line for trends
scale_color_manual(values = c("Harris" = "#1f77b4", "Trump" = "#d62728")) +  # Adjust according to candidate names
labs(title = "2024 U.S. Presidential Election National Polling Results",
x = "Date",
y = "Polling Result (%)",
color = "Candidate") +
theme_minimal(base_size = 15) +
theme(panel.grid.major = element_line(color = "gray80"),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "top") +
xlim(as.Date("2024-08-01"), as.Date("2024-10-17")) +
ylim(-20, 20)
library(ggplot2)
library(lubridate)
library(dplyr)
path_to_folder <- "/Users/liyang/Desktop/GY476_data/"
polls <- read.csv(paste0(path_to_folder, "president_polls.csv"))
# Convert end_date to date format
polls$end_date <- as.Date(polls$end_date, format="%m/%d/%Y")
# Choose specific dates and candidates
filtered_polls <- polls %>%
filter(end_date >= as.Date("2024-08-01") &
end_date <= as.Date("2024-10-17") &
(answer == "Trump" | answer == "Harris")) %>%
mutate(answer = factor(answer, levels = c("Harris", "Trump")))
# Create the plot using 'answer' as the y variable
ggplot(filtered_polls, aes(x = end_date, y = answer, color = candidate)) +
geom_jitter(size = 2, alpha = 0.7, width = 0.1) +  # Jittered points for individual poll results
geom_smooth(method = "loess", se = FALSE, size = 1.2) +  # Smoothed line for trends
scale_color_manual(values = c("Harris" = "#1f77b4", "Trump" = "#d62728")) +  # Adjust according to candidate names
labs(title = "2024 U.S. Presidential Election National Polling Results",
x = "Date",
y = "Polling Result (%)",
color = "Candidate") +
theme_minimal(base_size = 15) +
theme(panel.grid.major = element_line(color = "gray80"),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "top") +
xlim(as.Date("2024-08-01"), as.Date("2024-10-17")) +
ylim(-20, 20)
library(ggplot2)
library(lubridate)
library(dplyr)
path_to_folder <- "/Users/liyang/Desktop/GY476_data/"
polls <- read.csv(paste0(path_to_folder, "president_polls.csv"))
# Convert end_date to date format
polls$end_date <- as.Date(polls$end_date, format="%m/%d/%Y")
# Choose specific dates and candidates
filtered_polls <- polls %>%
filter(end_date >= as.Date("2024-08-01") &
end_date <= as.Date("2024-10-17") &
(answer == "Trump" | answer == "Harris")) %>%
mutate(answer = factor(answer, levels = c("Harris", "Trump")))
# Create the plot using 'answer' as the y variable
ggplot(filtered_polls, aes(x = end_date, y = answer, color = candidate_name)) +
geom_jitter(size = 2, alpha = 0.7, width = 0.1) +  # Jittered points for individual poll results
geom_smooth(method = "loess", se = FALSE, size = 1.2) +  # Smoothed line for trends
scale_color_manual(values = c("Harris" = "#1f77b4", "Trump" = "#d62728")) +  # Adjust according to candidate names
labs(title = "2024 U.S. Presidential Election National Polling Results",
x = "Date",
y = "Polling Result (%)",
color = "Candidate") +
theme_minimal(base_size = 15) +
theme(panel.grid.major = element_line(color = "gray80"),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "top") +
xlim(as.Date("2024-08-01"), as.Date("2024-10-17")) +
ylim(-20, 20)
# install.packages("plotly") ## IF NOT ALREADY INSTALLED
library(tidyverse)
library(plotly)
library(scales)
# Creating a dataframe with the unemployment data
unemp <- read_csv("data/unemployment.csv")
library(ggplot2)
library(lubridate)
library(dplyr)
path_to_folder <- "/Users/liyang/Desktop/GY476_data/"
polls <- read.csv(paste0(path_to_folder, "president_polls.csv"))
# Convert end_date to date format
polls$end_date <- as.Date(polls$end_date, format="%m/%d/%Y")
# Choose specific dates and candidates
filtered_polls <- polls %>%
filter(end_date >= as.Date("2024-08-01") &
end_date <= as.Date("2024-10-17") &
(answer == "Trump" | answer == "Harris")) %>%
mutate(answer = factor(answer, levels = c("Harris", "Trump")))
# Create the plot using 'answer' as the y variable
ggplot(filtered_polls, aes(x = end_date, y = answer, color = answer)) +
geom_jitter(size = 2, alpha = 0.7, width = 0.1) +  # Jittered points for individual poll results
geom_smooth(method = "loess", se = FALSE, size = 1.2) +  # Smoothed line for trends
scale_color_manual(values = c("Harris" = "#1f77b4", "Trump" = "#d62728")) +
labs(title = "2024 U.S. Presidential Election National Polling Results",
x = "Date",
y = "Polling Result",
color = "Candidate") +
theme_minimal(base_size = 15) +
theme(panel.grid.major = element_line(color = "gray80"),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "top") +
xlim(as.Date("2024-08-01"), as.Date("2024-10-17")) +
ylim(-20, 20)
library(ggplot2)
library(lubridate)
library(dplyr)
path_to_folder <- "/Users/liyang/Desktop/GY476_data/"
polls <- read.csv(paste0(path_to_folder, "president_polls.csv"))
# Convert end_date to date format
polls$end_date <- as.Date(polls$end_date, format="%m/%d/%Y")
# Choose specific dates and candidates
filtered_polls <- polls %>%
filter(end_date >= as.Date("2024-08-01") &
end_date <= as.Date("2024-10-17") &
(answer == "Trump" | answer == "Harris")) %>%
mutate(answer = factor(answer, levels = c("Harris", "Trump")))
# Create the plot using 'answer' as the y variable
ggplot(filtered_polls, aes(x = end_date, y = answer, color = answer)) +
geom_jitter(size = 2, alpha = 0.7, width = 0.1) +  # Jittered points for individual poll results
geom_smooth(method = "loess", se = FALSE, size = 1.2) +  # Smoothed line for trends
scale_color_manual(values = c("Harris" = "#1f77b4", "Trump" = "#d62728")) +
labs(title = "2024 U.S. Presidential Election National Polling Results",
x = "Date",
y = "Polling Result",
color = "Candidate") +
theme_minimal(base_size = 15) +
theme(panel.grid.major = element_line(color = "gray80"),
panel.grid.minor = element_blank(),
plot.title = element_text(hjust = 0.5),
legend.position = "top") +
xlim(as.Date("2024-08-01"), as.Date("2024-10-17")) +
ylim(-20, 20)
